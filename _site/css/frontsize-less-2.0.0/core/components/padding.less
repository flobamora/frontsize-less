.addPaddingRule(@selector, @hdFullPadding:6em, @hdReadyPadding:5em, @tabletLandscapePadding:4em, @tabletPortraitPadding:3em, @smartphoneLandscapePadding:2em, @smartphonePortraitPadding:1em) {
    // Media queries for selectors active from a specific resolution or higher
    .addPaddingRuleSmartphonePortrait(@selector, @smartphonePortraitPadding);
    .addPaddingRuleSmartphoneLandscape(@selector, @smartphoneLandscapePadding);
    .addPaddingRuleTabletPortrait(@selector, @tabletPortraitPadding);
    .addPaddingRuleTabletLandscape(@selector, @tabletLandscapePadding);
    .addPaddingRuleHdReady(@selector, @hdReadyPadding);
    .addPaddingRuleHdFull(@selector, @hdFullPadding);
}
/* private */.addPaddingRuleSmartphonePortrait(@selector, @smartphonePortraitPadding) when (@use-smartphone-portrait = true) {
    @media @from-smartphone-portrait {
        // Smartphone portrait
        .@{selector} { padding:@smartphonePortraitPadding; }
    }
}
/* private */.addPaddingRuleSmartphoneLandscape(@selector, @smartphoneLandscapePadding) when (@use-smartphone-landscape = true) {
    @media @from-smartphone-landscape {
        // Smartphone landscape
        .@{selector} { padding:@smartphoneLandscapePadding; }
    }
}
/* private */.addPaddingRuleTabletPortrait(@selector, @tabletPortraitPadding) when (@use-tablet-portrait = true) {
    @media @from-tablet-portrait {
        // Tablet portrait
        .@{selector} { padding:@tabletPortraitPadding; }
    }
}
/* private */.addPaddingRuleTabletLandscape(@selector, @tabletLandscapePadding) when (@use-tablet-landscape = true) {
    @media @from-tablet-landscape {
        // Tablet landscape
        .@{selector} { padding:@tabletLandscapePadding; }
    }
}
/* private */.addPaddingRuleHdReady(@selector, @hdReadyPadding) when (@use-hd-ready = true) {
    @media @from-hd-ready {
        // HD Ready
        .@{selector} { padding:@hdReadyPadding; }
    }
}
/* private */.addPaddingRuleHdFull(@selector, @hdFullPadding) when (@use-hd-full = true) {
    @media @from-hd-full {
        // Full HD
        .@{selector} { padding:@hdFullPadding; }
    }
}

.setViewportsPadding(@hdFullPadding:6em, @hdReadyPadding:5em, @tabletLandscapePadding:4em, @tabletPortraitPadding:3em, @smartphoneLandscapePadding:2em, @smartphonePortraitPadding:1em) {
    // Media queries for selectors active from a specific resolution or higher
    .setViewportsPaddingSmartphonePortrait(@smartphonePortraitPadding);
    .setViewportsPaddingSmartphoneLandscape(@smartphoneLandscapePadding);
    .setViewportsPaddingTabletPortrait(@tabletPortraitPadding);
    .setViewportsPaddingTabletLandscape(@tabletLandscapePadding);
    .setViewportsPaddingHdReady(@hdReadyPadding);
    .setViewportsPaddingHdFull(@hdFullPadding);
}
/* private */.setViewportsPaddingSmartphonePortrait(@smartphonePortraitPadding) when (@use-smartphone-portrait = true) {
    @media @from-smartphone-portrait {
        // Smartphone portrait
        padding:@smartphonePortraitPadding;
    }
}
/* private */.setViewportsPaddingSmartphoneLandscape(@smartphoneLandscapePadding) when (@use-smartphone-landscape = true) {
    @media @from-smartphone-landscape {
        // Smartphone landscape
        padding:@smartphoneLandscapePadding;
    }
}
/* private */.setViewportsPaddingTabletPortrait(@tabletPortraitPadding) when (@use-tablet-portrait = true) {
    @media @from-tablet-portrait {
        // Tablet portrait
        padding:@tabletPortraitPadding;
    }
}
/* private */.setViewportsPaddingTabletLandscape(@tabletLandscapePadding) when (@use-tablet-landscape = true) {
    @media @from-tablet-landscape {
        // Tablet landscape
        padding:@tabletLandscapePadding;
    }
}
/* private */.setViewportsPaddingHdReady(@hdReadyPadding) when (@use-hd-ready = true) {
    @media @from-hd-ready {
        // HD Ready
        padding:@hdReadyPadding;
    }
}
/* private */.setViewportsPaddingHdFull(@hdFullPadding) when (@use-hd-full = true) {
    @media @from-hd-full {
        // Full HD
        padding:@hdFullPadding;
    }
}

.addPaddingSelector(@selector:false, @verticalPadding:@vertical-padding, @horizontalPadding:@horizontal-padding) when not (@selector = false) {
    .@{selector}-padding {
        padding: @verticalPadding @horizontalPadding @important;
    }
    .@{selector}-padding-vertical {
        padding-bottom: @verticalPadding @important;
        padding-top: @verticalPadding @important;
    }
    .@{selector}-padding-bottom {
        padding-bottom: @verticalPadding @important;
    }
    .@{selector}-padding-top {
        padding-top: @verticalPadding @important;
    }
    .@{selector}-padding-horizontal {
        padding-left: @horizontalPadding @important;
        padding-right: @horizontalPadding @important;
    }
    .@{selector}-padding-left {
        padding-left: @horizontalPadding @important;
    }
    .@{selector}-padding-right {
        padding-right: @horizontalPadding @important;
    }
}.addPaddingSelector(@selector:false, @verticalPadding:@vertical-padding, @horizontalPadding:@horizontal-padding) when (@selector = false) {
    .with-padding {
        padding: @verticalPadding @horizontalPadding @important;
    }
    .padding-vertical {
        padding-bottom: @verticalPadding @important;
        padding-top: @verticalPadding @important;
    }
    .padding-bottom {
        padding-bottom: @verticalPadding @important;
    }
    .padding-top {
        padding-top: @verticalPadding @important;
    }
    .padding-horizontal {
        padding-left: @horizontalPadding @important;
        padding-right: @horizontalPadding @important;
    }
    .padding-left {
        padding-left: @horizontalPadding @important;
    }
    .padding-right {
        padding-right: @horizontalPadding @important;
    }
}
