// SMACSS - Base Rules
// Url - http://smacss.com/book/type-base
//
// HTML5 elements
// Url - http://html5doctor.com/element-index/


.base-abbr();
.base-blockquote();
.base-body();
.base-caption();
.base-code();
.base-figcaption();
.base-form();
.base-form-checkbox();
.base-form-datalist();
.base-form-fieldset();
.base-form-file();
.base-form-label();
.base-form-legend();
.base-form-output();
.base-form-radio();
.base-form-range();
.base-form-select();
.base-form-submit();
.base-form-text();
.base-form-textarea();
.base-h();
.base-hr();
.base-img();
.base-kbd();
.base-li();
.base-mark();
.base-meter();
.base-ol();
.base-p();
.base-pre();
.base-s();
.base-samp();
.base-small();
.base-span();
.base-table();
.base-td();
.base-tfoot();
.base-th();
.base-tr();
.base-ul();



// ========================================================================================================================================================================
// ==                                   ===================================================================================================================================
// ==              BASE                 ===================================================================================================================================
// ==              MIXIN                ===================================================================================================================================
// ==             WIDGETS               ===================================================================================================================================
// ==                                   ===================================================================================================================================
// ========================================================================================================================================================================

.base-body() {
    a, input {
        .disableOutline();
    }

    body {
        margin:0;
        padding:0;

        color:@font-default-color;
        text-shadow:1px 1px 0 rgba(255,255,255,.61);
        font-family: @font-default;

        background-color: #FCFCFC;

        .font-smoothing(); // if you want to enable font smoothing (will be applied to webkit only)
    }

}



.base-h() {
    @color:black;
    @fontFamily:@font-heading;
    @fontWeight:bold;
    @lineHeight:1;
    @margin: 0 0 0.5em 0;

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: @fontFamily;
        font-weight: @fontWeight;
        color: @color;
        line-height: @lineHeight;
        margin: @margin;
        .user-select();
    }
}

.base-code() {
    // The code element represents a fragment of computer code.
    // This could be an XML element name, a filename, a computer program, or any other string that a computer would recognize.
    //
    // Url - http://html5doctor.com/element-index/#code
    //
    // The var element represents a variable.
    // This could be an actual variable in a mathematical expression or programming context, or it could just be a term used as a placeholder in prose.
    //
    // Url - http://html5doctor.com/element-index/#var

    @padding: 0 0.25em;
    @backgroundColor: rgba(0,0,0,.075);
    @color: inherit;

    code,
    .code {
        overflow: scroll;
    }

    code,
    .code,
    var,
    .var {
        font-family: @font-monospace;
        padding:@padding;

        color:@color;

        border:1px solid;
        .fallbackColor(border-color, rgba(0,0,0,.03));
        .fallbackColor(border-top-color, rgba(0,0,0,.075));
        .fallbackColor(background-color, @backgroundColor);

        .border-radius(4px);
        .box-shadow(0 1px 0 rgba(255,255,255,0.2));

        &.code-black {
            background-color: #202020;
            text-shadow: none;
            color: white;
        }
    }
}

.base-samp() {
    @fontFamily: @font-monospace;
    @fontStyle: normal;
    @color: inherit;
    samp {
        font-family: @fontFamily;
        font-style: @fontStyle;
        color: @color;
    }
}

.base-kbd() {
    @fontFamily: @font-monospace;
    @fontStyle: normal;
    @color: inherit;

    kbd {
        font-family: @fontFamily;
        font-style: @fontStyle;
        .keyboard-commodore();
        kbd {
            padding: 0;
            border:none;
            background-color: transparent;
            background: none;
            .box-shadow(none);
            position: static;
            &:active {
                margin-bottom:0;
                border:none;
            }
        }
    }
}

.base-pre() {
    @padding: 1em;
    @backgroundColor: #202020;
    @color: white;

    pre {
        font-family: @font-monospace;
        padding:@padding;
        overflow: auto;

        white-space: pre;
        color:@color;
        text-shadow: none;

        border:1px solid;
        .fallbackColor(border-color, rgba(0,0,0,.03));
        .fallbackColor(border-top-color, rgba(0,0,0,.075));
        background-color: @backgroundColor;

        .border-radius(4px);
        .box-shadow(0 1px 0 rgba(255,255,255,.6));

        kbd {
            color:darken(@color, 40%);
            cursor: inherit;
            .user-select(inherit);
            padding: 0;
            border:none;
            background-color: transparent;
            background: none;
            .box-shadow(none);
            text-shadow: none;
            position: static;
            &:active {
                margin-bottom:0;
                border:none;
            }
        }

        code,
        samp {
            border-color:transparent;
            background-color: transparent;
            .box-shadow(none);
        }
        &.with-small-fonts {
            font-family: @font-monospace;
        }
    }
}

.base-meter() {
    // When the meter binding applies to a meter element, the element is expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of '5em', a 'vertical-align' of '-0.2em', and with its contents depicting a gauge.
    //
    // When the element is wider than it is tall(or square), the depiction is expected to be of a horizontal gauge, with the minimum value on the right if the 'direction' property on this element has a computed value of 'rtl', and on the left otherwise.
    // When the element is taller than it is wide, it is expected to depict a vertical gauge, with the minimum value on the bottom.
    //
    // Code snippet:
    // Your score is: <meter> 2 out of 10 </meter>
    //
    // Url - http://html5doctor.com/element-index/#meter
    meter {
        // meter | progress
        binding: meter;
    }
}

.base-progress() {
    progress {
        // Represents the completion progress of a task.
        // Progress may be either indeterminate — meaning it is unclear how much work remains before the task is complete (e.g., the task is waiting for a response from a remote host) — or a numeric value between 0 and a given maximum, explicitly specifying the fraction of work that has so far been completed.
        //
        // Code snippet:
        // <section>
        //  <p>Progress: <progress> <span id="p">0</span>% </progress> </p>
        //
        //  <script>
        //  var progressBar = document.getElementById('p');
        //  function updateProgress(newValue) {
        //      progressBar.textContent = newValue;
        //  }
        //  </script>
        // </section>
        //
        // Url - http://html5doctor.com/element-index/#progress
    }
}

.base-s() {
    @color: @font-default-color;
    @textDecoration: line-through;
    @opacity:@state-faded-opacity;

    s {
        // The s element represents contents that are no longer accurate or no longer relevant.
        // Url - http://html5doctor.com/element-index/#s
        color: @color;
        text-decoration: @textDecoration;
        opacity: @opacity;
    }
}


.base-mark() {
    // Represents a run of text in one document marked or highlighted because of its relevance in another context.
    // When used in a quotation or other block of text referenced in a document, it indicates a highlight that was not present in the original document — e.g., a portion of text in an academic publication that has recently come under additional scrutiny.
    //
    // Url - http://html5doctor.com/element-index/#mark
    @backgroundColor: rgb(255,255,0);

    mark {
        color:inherit;
        background-color:@backgroundColor;
        .box-shadow(0 0 1px rgba(0, 0, 0, 0.35), inset 0 0 2px rgba(255, 255, 255, 0.75););
    }
}

.base-ul() {
    @padding: 0;
    @margin: 0;
    ul {
        padding: @padding;
        margin: @margin;
    }
}
.base-li() {
    @padding: 0;
    @margin: 0 0 0 1.25em;
    li {
        padding: @padding;
        margin: @margin;
    }
}

.base-ol() {
    @padding: 0;
    @margin: 0;
    ol {
        padding: @padding;
        margin: @margin;
    }

    dt {
        font-weight: bold;
    }
}

.base-abbr() {
    // Represents an abbreviation or acronym.
    // The optional title attribute may be used to provide an expansion of the abbreviation.
    // If specified, the title attribute must contain an expansion of the abbreviation and nothing else.
    //
    // Url - http://html5doctor.com/element-index/#abbr
    @borderColor: #FCFCFC;
    abbr,
    abbr[title] {
        border-bottom: 2px dotted @borderColor;
        cursor: help;
        .transition(border 0.25s ease-in-out);
        &:hover {
            border-bottom: 2px solid darken(@borderColor,10%);
            text-decoration: none;
        }
    }
}
.base-p() {
    p {
        .user-select();
    }
}

.base-span() {
    span {
        display: inline-block;
    }
}

.base-small() {
    small {
        // Represents side comments such as small print.
        // It is not intended to be presentational.
        // The small element should not be used for extended spans of text such as multiple paragraphs, lists, or sections of text. It is only intended for short runs of text.
        //
        // Url - http://html5doctor.com/element-index/#small
        font-size: @font-small-size;
    }
}

.base-blockquote() {
    @borderLeft: 4px solid lighten(@font-default-color, 20%);
    @backgroundColor: lighten(@font-default-color, 45%);
    @padding: @global-padding;
    @fontStyle: italic;
    @beforeText: '«';
    @afterText: '»';

    blockquote {
        border-left: @borderLeft;
        padding: @padding;
        background-color: @backgroundColor;
        font-style: @fontStyle;
        &:before {
            content:@beforeText;
        }
        &:after {
            content:@afterText;
        }
    }
}

.base-form-text() {
    @color: @font-default-color;
    @borderStyle: 1px solid;
    @borderColor: rgba(0,0,0,.2);
    @borderFocusedStyle: 1px solid;
    @borderFocusedColor: rgba(0,0,0,0.3);
    @backgroundColor: rgba(0,0,0,.05);
    @backgroundColorFocused: white;
    @padding: 0.5em;
    @placeholderColor: @color;

    textarea,
    input[type="text"],
    input[type="email"],
    input[type="password"],
    input[type="number"],
    input[type="date"] {

        width: 100%;
        padding: @padding;

        .disableOutline();
        .box-sizing(border-box);

        .fallbackColor(color, @color);

        border: @borderStyle;
        .fallbackColor(border-color, @borderColor);
        .fallbackColor(background-color, @backgroundColor);

        .input-placeholder(@placeholderColor, lighten(@placeholderColor, 20%));
        .box-shadow(inset 0 1px 4px rgba(0,0,0,.15), 0 0 0 rgba(0,0,0,0););
        .transition(border-color .25s ease-in-out, background-color .25s ease-in-out, box-shadow .25s ease-in-out;);

        &:focus {
            border: @borderFocusedStyle;
            .fallbackColor(border-color, @borderFocusedColor);
            .fallbackColor(background-color, @backgroundColorFocused);
            .box-shadow(inset 0 0 0 rgba(0,0,0,0), 0 1px 4px rgba(0,0,0,0.15););
        }

        &:disabled {
            cursor: default;
            .opacity(@state-disabled-opacity);
        }
    }
}

.base-form-file() {
    input[type="file"] {
        .appearance(none);
        .button-dark-metal();
    }
}

.base-form-range() {
    input[type="range"] {

    }
}

.base-form-radio() {
    @checkedBackgroundColor: white;
    @checkedBorderColor: lighten(@font-default-color, 15%);
    @backgroundColor: @font-default-color;
    @borderColor: white;

    input[type="radio"] {
        .user-select(none);
        cursor: pointer;

        .appearance(none);
        // -moz-appearance: radio;

        @size:24px;
        .size(@size);
        .moveTop((@size / 4));

        @imageWidth:(@size * 2);
        @imageHeight:@size;
        .spriteRetina("input-radio-1x.png", "input-radio-2x.png", @size, @size, @imageWidth, @imageHeight);

        &:checked {
            .spritePosition(1, 0, @size);
        }
    }
}
.base-form-checkbox() {
    @checkedBackgroundColor: white;
    @checkedBorderColor: lighten(@font-default-color, 15%);
    @backgroundColor: @font-default-color;
    @borderColor: white;

    input[type="checkbox"] {
        .user-select(none);
        cursor: pointer;

        .appearance(none);
        // -moz-appearance: checkbox;

        @size:32px;
        .size(@size);
        .moveTop((@size / 4));

        @imageWidth:(@size * 2);
        @imageHeight:@size;
        .spriteRetina("input-checkbox-1x.png", "input-checkbox-2x.png", @size, @size, @imageWidth, @imageHeight);

        &:checked {
            .spritePosition(1, 0, @size);
        }
    }
}

.base-hr() {
    @margin: @vertical-padding 0;
    @borderStyle: 1px solid;
    @borderTopColor: rgba(0,0,0,0.075);
    @borderBottomColor: rgba(255,255,255,0.8);

    hr {
        display: block;
        width: 100%;
        padding: 0;
        margin: @margin;

        border: none;
        border-top: @borderStyle;
        border-bottom: @borderStyle;
        .fallbackColor(border-top-color, @borderTopColor);
        .fallbackColor(border-bottom-color, @borderBottomColor);
    }
}

.base-table() {
    @verticalAlign: middle;
    @borderCollapse: separate;

    table {
        // The table element represents data with more than one dimension, in the form of a table.
        // Tables must not be used as layout aids.
        //
        // Code snippet:
        // <table>
        //  <tr>
        //      <td>dog</td>
        //      <td>cat</td>
        //      <td>horse</td>
        //      <td>iguana</td>
        //  </tr>
        // </table>
        //
        // Url - http://html5doctor.com/element-index/#table
        border-collapse: @borderCollapse;
        vertical-align: @verticalAlign;
        width: 100%;
    }
}
.base-figcaption() {
    @padding: @vertical-padding 0 0 0;
    figcaption {
        padding: @padding;
    }
}
.base-caption() {
    @padding: @global-padding;
    caption {
        // The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.
        //
        // When a table element is the only content in a figure element other than the figcaption, the caption element should be omitted in favor of the figcaption.
        //
        // Code snippet:
        // <table>
        //  <caption>Monthly savings</caption>
        //  <thead>
        //      <tr>
        //          <th scope="col">Header 1</th>
        //          <th scope="col">Header 2</th>
        //          <th scope="col">Header 3</th>
        //      </tr>
        //  </thead>
        //  <tfoot>
        //      ...
        //  </tfoot>
        //  <tbody>
        //      ...
        //  </tbody>
        // </table>
        //
        // Url - http://html5doctor.com/element-index/#caption
        padding: @padding;
    }
}

.base-th() {
    @textAlign: center;
    @fontWeight: bold;
    @padding: 0.5em;

    th {
        text-align: @textAlign;
        font-weight: @fontWeight;
        padding: @padding;
    }
}
.base-td() {
    @textAlign: left;
    @padding: 0.5em;

    td {
        text-align: @textAlign;
        padding: @padding;
    }
}
.base-tr() {
    @backgroundColorOdd: rgb(230,230,230);
    @backgroundColorEven: white;
    @backgroundColorHover: rgb(220,220,220);
    @backgroundColorHoverOdd: rgb(240,240,240);
    @backgroundColorHoverEven: white;

    tbody {
        tr {
            &:nth-child(odd) {
                td {
                    background-color: @backgroundColorOdd;
                }
            }
            &:nth-child(even) {
                td {
                    background-color: @backgroundColorEven;
                }
            }
        }
        &:hover {
            tr {
                &:nth-child(odd) {
                    td {
                        background-color: @backgroundColorHoverOdd;
                    }
                }
                &:nth-child(even) {
                    td {
                        background-color: @backgroundColorHoverEven;
                    }
                }
                &:hover {
                    td {
                        background-color: @backgroundColorHover;
                    }
                }
            }
        }
    }
}
.base-tfoot() {
    @textAlign: center;
    @color: lighten(@font-default-color,20%);
    tfoot {
        // The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.
        //
        // Code snippet:
        // <table>
        //  <thead>
        //      ...
        //  </thead>
        //  <tfoot>
        //      <tr>
        //          <td>Footer 1</td>
        //          <td>Footer 2</td>
        //          <td>Footer 3</td>
        //      </tr>
        //  </tfoot>
        //  <tbody>
        //      ...
        //  </tbody>
        // </table>
        //
        // Url - http://html5doctor.com/element-index/#tfoot
        td {
            text-align: @textAlign;
            color: @color;
        }

    }
}

.base-form-textarea() {
    @minHeight: 100px;
    @maxHeight: 300px;
    @resize: vertical;

    textarea {
        // The textarea element represents a multiline plain text edit control for the element's raw value.
        // The contents of the control represent the control's default value.
        //
        // Code snippet:
        // <form action="/action-name.php" method="post" enctype="multipart/form-data">
        //  <textarea cols="50" rows="10"></textarea>
        // </form>
        //
        // Url - http://html5doctor.com/element-index/#textarea
        width:100%;
        .box-sizing(border-box);
        .resize(@resize);
        @minHeight: 100px;
        min-height: @minHeight;
        max-height: @maxHeight;
    }
}

.base-form() {
    @padding: 1em 0 0 0;
    form {
        padding: @padding;
    }
}

.base-form-label() {

    label {
        // The label represents a caption in a user interface.
        // The caption can be associated with a specific form control, known as the label element's labeled control, either using for attribute, or by putting the form control inside the label element itself.
        //
        // Code snippet:
        // <label for="un">Username:</label>
        // <input name="user-name" id="un" type="email" placeholder="Your username is your email address" required autofocus>
        //
        // Url - http://html5doctor.com/element-index/#label

        display: inline-block;
        .box-sizing(border-box);
        .user-select(none);

        textarea,
        input {
            margin-top:0;
        }
    }
}



.base-form-output() {
    output {
        // Url - http://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_output

    }
}

.base-form-datalist() {
    @color: @font-default-color;
    @backgroundColorOdd: rgb(230,230,230);
    @backgroundColorEven: white;
    @backgroundColorHoverOdd: rgb(240,240,240);
    @backgroundColorHoverEven: @backgroundColorHoverOdd;

    datalist *,
    select option {
        // Url - http://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_datalist
        color: @color;
        border:1px solid transparent;
        &:nth-child(odd) {
            background-color: @backgroundColorOdd;
            &:hover {
                background-color: @backgroundColorHoverOdd;
            }
        }
        &:nth-child(even) {
            background-color: @backgroundColorEven;
            &:hover {
                background-color: @backgroundColorHoverEven;
            }
        }
    }
}



.base-form-select() {
    @backgroundColor: @font-default-color;

    select,
    keygen {
        // The select element represents a control for selecting amongst a set of options.
        //
        // Code snippet:
        // <select id="title" name="title">
        //  <option value="" selected>Please choose</option>
        //  <option value="Mr">Mr</option>
        //  <option value="Miss">Miss</option>
        //  <option value="Mrs">Mrs</option>
        //  <option value="Ms">Ms</option>
        //  <option value="Dr">Dr</option>
        //  <option value="Other">Other</option>
        // </select>
        //
        // Url - http://html5doctor.com/element-index/#select

        .appearance(none);

        cursor: pointer;
        padding: 0.25em 1.75em 0.25em 0.5em;

        color: @font-default-color;
        font-weight: normal;
        //.cropText();

        border: 2px solid @backgroundColor;
        background-color: desaturate(lighten(@backgroundColor, 45%), 2%);

        @size: 16px;
        .backgroundRetinaIcon("input-select-1x.png", "input-select-2x.png", @size);
        background-position: right 0.5em center;

        .transition(background-color 0.25s ease-in-out);
        .border-radius(10px);

        &:hover {
            background-color: white;
        }
    }
}

.base-form-fieldset() {
    @backgroundColor: desaturate(lighten(@font-default-color, 45%), 2%);

    fieldset {
        // The fieldset element is expected to establish a new block formatting context.
        //
        // If the fieldset element has a child that matches the conditions in the list below, then the first such child is the fieldset element's rendered legend:
        // The child is a legend element.
        // The child is not out-of-flow (e.g. not absolutely positioned or floated).
        // The child is generating a box (e.g. it is not 'display:none').
        //
        // Code snippet:
        // <form id="app-login" action="process.php">
        //  <fieldset>
        //      <legend>Login Details</legend>
        //      <div>
        //          <label for="user-name">Username:</label>
        //          <input name="user-name" type="email" placeholder="Your username is your email address" required autofocus>
        //      </div>
        //      <div>
        //          <label for="password">Password:</label>
        //          <input name="password" type="password" placeholder="6 digits, a combination of numbers and letters" required>
        //      </div>
        //      <div>
        //          <input name="login" type="submit" value="Login">
        //      </div>
        //  </fieldset>
        // </form>
        //
        // Url - http://html5doctor.com/element-index/#fieldset

        background-color: @backgroundColor;
        border:none;
        padding:@global-padding;
        .box-shadow(inset 0 -1px 0 rgba(0,0,0,0.05));
        .border-radius(10px);
    }
}

.base-form-legend() {
    @backgroundColor: desaturate(lighten(@font-default-color, 45%), 2%);

    legend {
        // The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any.
        //
        // Code snippet:
        // <form id="app-login" action="process.php">
        //  <fieldset>
        //      <legend>Login Details</legend>
        //      <div>
        //          <label for="user-name">Username:</label>
        //          <input name="user-name" type="email" placeholder="Your username is your email address" required autofocus>
        //      </div>
        //      <div>
        //          <label for="password">Password:</label>
        //          <input name="password" type="password" placeholder="6 digits, a combination of numbers and letters" required>
        //      </div>
        //      <div>
        //          <input name="login" type="submit" value="Login">
        //      </div>
        //  </fieldset>
        // </form>
        //
        // Url - http://html5doctor.com/element-index/#legend

        @round: 20px;
        font-weight: bold;
        background-color: @backgroundColor;
        padding:(@vertical-padding / 1.5) @horizontal-padding;
        margin-left: -(@horizontal-padding);
        .border-radius(@round @round 0 0);
    }
}

.base-form-submit() {
    button,
    input[type="reset"],
    input[type="button"],
    input[type="submit"] {
        //.button-metal();
        .button-dark-metal();
    }
}

.base-img() {
    img {
        // An img element represents an image.
        // The image given by the src attribute is the embedded content, and the value of the alt attribute is the img element's fallback content.
        //
        // The src attribute must be present, and must contain a valid non-empty URL potentially surrounded by spaces referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted.
        //
        // The img element must not be used as a layout tool.
        // In particular, img elements should not be used to display transparent images, as they rarely convey meaning and rarely add anything useful to the document.
        //
        // Url - http://html5doctor.com/element-index/#img
        .interpolation-mode(bicubic);
    }
}
