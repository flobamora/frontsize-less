// ========================================================================================================================================================================
// ==                                   ===================================================================================================================================
// ==             FRONTSIZE             ===================================================================================================================================
// ==             MIXINS                ===================================================================================================================================
// ==                                   ===================================================================================================================================
// ========================================================================================================================================================================

// Easing effects
.ease(@easing) when (@easing) {
    .transition-timing-function(@easing);
}
.ease(@easing) when (@easing = ease-in-quad) {
    .transition-timing-function(cubic-bezier(0.550, 0.085, 0.680, 0.530));
}
.ease(@easing) when (@easing = ease-in-cubic) {
    .transition-timing-function(cubic-bezier(0.550, 0.055, 0.675, 0.190));
}
.ease(@easing) when (@easing = ease-in-quart) {
    .transition-timing-function(cubic-bezier(0.895, 0.030, 0.685, 0.220));
}
.ease(@easing) when (@easing = ease-in-quint) {
    .transition-timing-function(cubic-bezier(0.755, 0.050, 0.855, 0.060));
}
.ease(@easing) when (@easing = ease-in-sine) {
    .transition-timing-function(cubic-bezier(0.470, 0.000, 0.745, 0.715));
}
.ease(@easing) when (@easing = ease-in-expo) {
    .transition-timing-function(cubic-bezier(0.950, 0.050, 0.795, 0.035));
}
.ease(@easing) when (@easing = ease-in-circ) {
    .transition-timing-function(cubic-bezier(0.600, 0.040, 0.980, 0.335));
}
.ease(@easing) when (@easing = ease-in-back) {
    .transition-timing-function(cubic-bezier(0.600,-0.280, 0.735, 0.045));
}
.ease(@easing) when (@easing = ease-out-quad) {
    .transition-timing-function(cubic-bezier(0.250, 0.460, 0.450, 0.940));
}
.ease(@easing) when (@easing = ease-out-cubic) {
    .transition-timing-function(cubic-bezier(0.215, 0.610, 0.355, 1.000));
}
.ease(@easing) when (@easing = ease-out-quart) {
    .transition-timing-function(cubic-bezier(0.165, 0.840, 0.440, 1.000));
}
.ease(@easing) when (@easing = ease-out-quint) {
    .transition-timing-function(cubic-bezier(0.230, 1.000, 0.320, 1.000));
}
.ease(@easing) when (@easing = ease-out-sine) {
    .transition-timing-function(cubic-bezier(0.390, 0.575, 0.565, 1.000));
}
.ease(@easing) when (@easing = ease-out-expo) {
    .transition-timing-function(cubic-bezier(0.190, 1.000, 0.220, 1.000));
}
.ease(@easing) when (@easing = ease-out-circ) {
    .transition-timing-function(cubic-bezier(0.075, 0.820, 0.165, 1.000));
}
.ease(@easing) when (@easing = ease-out-back) {
    .transition-timing-function(cubic-bezier(0.175, 0.885, 0.320, 1.275));
}
.ease(@easing) when (@easing = ease-in-out-quad) {
    .transition-timing-function(cubic-bezier(0.455, 0.030, 0.515, 0.955));
}
.ease(@easing) when (@easing = ease-in-out-cubic) {
    .transition-timing-function(cubic-bezier(0.645, 0.045, 0.355, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-quart) {
    .transition-timing-function(cubic-bezier(0.770, 0.000, 0.175, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-quint) {
    .transition-timing-function(cubic-bezier(0.860, 0.000, 0.070, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-sine) {
    .transition-timing-function(cubic-bezier(0.445, 0.050, 0.550, 0.950));
}
.ease(@easing) when (@easing = ease-in-out-expo) {
    .transition-timing-function(cubic-bezier(1.000, 0.000, 0.000, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-circ) {
    .transition-timing-function(cubic-bezier(0.785, 0.135, 0.150, 0.860));
}
.ease(@easing) when (@easing = ease-in-out-back) {
    .transition-timing-function(cubic-bezier(0.680,-0.550, 0.265, 1.550));
}

// backgrounds
.verticalGradient(@color:#cbcbcb, @strenght:5%) when (@use-css-prefix = true) {
    @lighten: saturate(lighten(@color,@strenght),(-@strenght/2));
    @darken: saturate(darken(@color,@strenght),(@strenght/2));
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@lighten), color-stop(100%,@darken));
}.verticalGradient(@color:#cbcbcb, @strenght:5%) {
    @lighten: saturate(lighten(@color,@strenght),(-@strenght/2));
    @darken: saturate(darken(@color,@strenght),(@strenght/2));
    .linear-gradient(top, @lighten 0%, @darken 100%;);
    .ieVerticalGradient(@lighten, @darken);
}

.verticalGradientColors(@firstColor:#000000, @lastColor:#FFFFFF) when (@use-css-prefix = true) {
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@firstColor), color-stop(100%,@lastColor));
}.verticalGradientColors(@firstColor:#000000, @lastColor:#FFFFFF) {
    .linear-gradient(top, @firstColor 0%, @lastColor 100%;);
    .ieVerticalGradient(@firstColor, @lastColor);
}

.ieVerticalGradient(@firstColor, @lastColor) when (@use-ie-filters = true) {
    @firstColor: fade(@firstColor, 100%);
    @lastColor: fade(@lastColor, 100%);
    filter: progid:dximagetransform.microsoft.gradient(startColorstr='@{firstColor}', endColorstr='@{lastColor}', GradientType=0);
}

.glossGradient(@color: #0A75Bf, @strength: 10%, @borderSize: 0) when (@use-css-prefix = true) {
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,lighten(@color, @strength/2)), color-stop(50%,@color), color-stop(51%,lighten(@color, @strength)), color-stop(100%,lighten(@color, @strength/2))); /* Chrome,Safari4+ */
}.glossGradient(@color: #0A75Bf, @strength: 10%, @borderSize: 0) when not (@borderSize = 0) {
    border: @borderSize solid @color;
    .linear-gradient(bottom, lighten(@color, @strength/2) 0%, @color 50%, lighten(@color, @strength) 51%, lighten(@color, @strength/2) 100%;);
}.glossGradient(@color: #0A75Bf, @strength: 10%, @borderSize: 0) when (@borderSize = 0) {
    .linear-gradient(bottom, lighten(@color, @strength/2) 0%, @color 50%, lighten(@color, @strength) 51%, lighten(@color, @strength/2) 100%;);
}

.backgroundImage(@backgroundImage, @path:'') when (@use-root-path = false) {
    background-image: url('@{path}@{backgroundImage}');
}.backgroundImage(@backgroundImage, @path:@root-path) when (@use-root-path = true) {
    background-image: url('@{path}@{backgroundImage}');
}

.backgroundResponsive(@hdFullBackground, @hdReadyBackground, @tabletLandscapeBackground, @tabletPortraitBackground, @smartphoneLandscapeBackground, @smartphonePortraitBackground) {
    // .backgroundResponsive(
    //     "path/hd-full/background.png",
    //     "path/hd-ready/background.png",
    //     "path/tablet-landscape/background.png",
    //     "path/tablet-portrait/background.png",
    //     "path/smartphone-landscape/background.png",
    //     "path/smartphone-portrait/background.png"
    // );
    .backgroundHdFull(@hdFullBackground);
    .backgroundHdReady(@hdReadyBackground);
    .backgroundTabletLandscape(@tabletLandscapeBackground);
    .backgroundTabletPortrait(@tabletPortraitBackground);
    .backgroundSmartphoneLandscape(@smartphoneLandscapeBackground);
    .backgroundSmartphonePortrait(@smartphonePortraitBackground);
}
.backgroundHdFull(@hdFullBackground) when (@use-hd-full = true) {
    @media @from-hd-full {
        // Full HD
        .backgroundImage(@hdFullBackground);
    }
}
.backgroundHdReady(@hdReadyBackground) when (@use-hd-ready = true) {
    @media @from-hd-ready {
        // HD Ready
        .backgroundImage(@hdReadyBackground);
    }
}
.backgroundTabletLandscape(@tabletLandscapeBackground) when (@use-tablet-landscape = true) {
    @media @from-tablet-landscape {
        // Tablet landscape
        .backgroundImage(@tabletLandscapeBackground);
    }
}
.backgroundTabletPortrait(@tabletPortraitBackground) when (@use-tablet-portrait = true) {
    @media @from-tablet-portrait {
        // Tablet portrait
        .backgroundImage(@tabletPortraitBackground);
    }
}
.backgroundSmartphoneLandscape(@smartphoneLandscapeBackground) when (@use-smartphone-landscape = true) {
    @media @from-smartphone-landscape {
        // Smartphone landscape
        .backgroundImage(@smartphoneLandscapeBackground);
    }
}
.backgroundSmartphonePortrait(@smartphonePortraitBackground) when (@use-smartphone-portrait = true) {
    @media @from-smartphone-portrait {
        // Smartphone portrait
        .backgroundImage(@smartphonePortraitBackground);
    }
}
.sprite(@image, @width, @height:@width, @backgroudSize:auto, @rootPath:'') when (@use-root-path = false) {
    .backgroundImage(@image, @rootPath);
    background-repeat:no-repeat;
    background-size:@backgroudSize;
    .size(@width, @height);
    .box-sizing(border-box);
}.sprite(@image, @width, @height:@width, @backgroudSize:auto, @rootPath:@rootPath) when (@use-root-path = true) {
    .backgroundImage(@image, @rootPath);
    background-repeat:no-repeat;
    background-size:@backgroudSize;
    .size(@width, @height);
    .box-sizing(border-box);
}

.spritePosition(@horizontalPosition:0, @verticalPosition:0, @width:0, @height:@width) when (@horizontalPosition = 0) {
    background-position: 0 unit(-(@verticalPosition*@height),px);
}.spritePosition(@horizontalPosition:0, @verticalPosition:0, @width:0, @height:@width) when (@verticalPosition = 0) {
    background-position: unit(-(@horizontalPosition*@width),px) 0;
}.spritePosition(@horizontalPosition:0, @verticalPosition:0, @width:0, @height:@width) when (@horizontalPosition = 0) and (@verticalPosition = 0) {
    background-position: 0;
}.spritePosition(@horizontalPosition:0, @verticalPosition:0, @width:0, @height:@width) when not (@horizontalPosition = 0) and not (@verticalPosition = 0) {
    background-position: unit(-(@horizontalPosition*@width),px) unit(-(@verticalPosition*@height),px);
}

.spriteCoordinates(@positionX:0, @positionY:0) {
    background-position: -@positionX -@positionY;
}
.cropText(@overflow:ellipsis, @whiteSpace:nowrap) {
    overflow: hidden;
    white-space: @whiteSpace;
    .text-overflow(@overflow);
}

.disableOutline() {
    &:focus {
        outline: transparent;
    }
}.disableOutline() when (@use-css-prefix = true) {
    &::-moz-focus-inner {
        border: 0;
    }
}

.roundTop(@radius:6px) {
    // sets the top radius of the element
    .border-radius(@radius @radius 0 0);
}
.roundBottom(@radius:6px) {
    // sets the bottom radius of the element
    .border-radius(0 0 @radius @radius);
}
.roundLeft(@radius:6px) {
    // sets the left radius of the element
    .border-radius(@radius 0 0 @radius);
}
.roundRight(@radius:6px) {
    // sets the right radius of the element
    .border-radius(0 @radius @radius 0);
}


.asTable(@cellPadding:@global-padding, @verticalAlign:middle, @tableWidth:100%) {
    display: table;
    width: @tableWidth;
    > * {
        .asTableRow(@cellPadding, @verticalAlign);
    }
}

.asTableRow(@cellPadding:@global-padding, @verticalAlign:middle) {
    display: table-row;
    > * {
        .asTableCell(@cellPadding, @verticalAlign);
    }
}

.asTableCell(@cellPadding:@global-padding, @verticalAlign:middle) {
    display: table-cell;
    padding: @cellPadding;
    vertical-align: @verticalAlign;
}

.moveTop(@top:0, @position:relative) {
    position: @position;
    top:@top;
}

.moveBottom(@bottom:0, @position:relative) {
    position: @position;
    bottom:@bottom;
}

.moveLeft(@left:0, @position:relative) {
    position: @position;
    left:@left;
}

.moveRight(@right:0, @position:relative) {
    position: @position;
    right:@right;
}

.size(@width:16px, @height:@width, @scale:1) when (isnumber(@width)) and (isnumber(@height)) {
    width: (@width * @scale);
    height: (@height * @scale);
}.size(@width:16px, @height:@width, @scale:1) when not (isnumber(@width)) and not (isnumber(@height)) {
    width: @width;
    height: @height;
}.size(@width:16px, @height:@width, @scale:1) when (isnumber(@width)) and not (isnumber(@height)) {
    width: @width;
    height: @height;
}.size(@width:16px, @height:@width, @scale:1) when not (isnumber(@width)) and (isnumber(@height)) {
    width: @width;
    height: @height;
}

.icon(@backgroundImage, @width, @height:@width) {
    .size(@width, @height);
    .backgroundImage(@backgroundImage);
    background-repeat: no-repeat;
    background-position: center;
}

.outlineBoxShadow(@outlineOpacity:0.2, @boxShadow:0 0 0 transparent) {
    .box-shadow(0 0 1px rgba(0,0,0,@outlineOpacity), @boxShadow;);
}
