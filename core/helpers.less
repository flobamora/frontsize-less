/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==             FRONTSIZE             ===================================================================================================================================
==             MIXINS                ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

// Easing effects
.ease(@easing) when (@easing) {
	.transition-timing-function(@easing);
}
.ease(@easing) when (@easing = ease-in-quad) {
	.transition-timing-function(cubic-bezier(0.550, 0.085, 0.680, 0.530));
}
.ease(@easing) when (@easing = ease-in-cubic) {
	.transition-timing-function(cubic-bezier(0.550, 0.055, 0.675, 0.190));
}
.ease(@easing) when (@easing = ease-in-quart) {
	.transition-timing-function(cubic-bezier(0.895, 0.030, 0.685, 0.220));
}
.ease(@easing) when (@easing = ease-in-quint) {
	.transition-timing-function(cubic-bezier(0.755, 0.050, 0.855, 0.060));
}
.ease(@easing) when (@easing = ease-in-sine) {
	.transition-timing-function(cubic-bezier(0.470, 0.000, 0.745, 0.715));
}
.ease(@easing) when (@easing = ease-in-expo) {
	.transition-timing-function(cubic-bezier(0.950, 0.050, 0.795, 0.035));
}
.ease(@easing) when (@easing = ease-in-circ) {
	.transition-timing-function(cubic-bezier(0.600, 0.040, 0.980, 0.335));
}
.ease(@easing) when (@easing = ease-in-back) {
	.transition-timing-function(cubic-bezier(0.600,-0.280, 0.735, 0.045));
}
.ease(@easing) when (@easing = ease-out-quad) {
	.transition-timing-function(cubic-bezier(0.250, 0.460, 0.450, 0.940));
}
.ease(@easing) when (@easing = ease-out-cubic) {
	.transition-timing-function(cubic-bezier(0.215, 0.610, 0.355, 1.000));
}
.ease(@easing) when (@easing = ease-out-quart) {
	.transition-timing-function(cubic-bezier(0.165, 0.840, 0.440, 1.000));
}
.ease(@easing) when (@easing = ease-out-quint) {
	.transition-timing-function(cubic-bezier(0.230, 1.000, 0.320, 1.000));
}
.ease(@easing) when (@easing = ease-out-sine) {
	.transition-timing-function(cubic-bezier(0.390, 0.575, 0.565, 1.000));
}
.ease(@easing) when (@easing = ease-out-expo) {
	.transition-timing-function(cubic-bezier(0.190, 1.000, 0.220, 1.000));
}
.ease(@easing) when (@easing = ease-out-circ) {
	.transition-timing-function(cubic-bezier(0.075, 0.820, 0.165, 1.000));
}
.ease(@easing) when (@easing = ease-out-back) {
	.transition-timing-function(cubic-bezier(0.175, 0.885, 0.320, 1.275));
}
.ease(@easing) when (@easing = ease-in-out-quad) {
	.transition-timing-function(cubic-bezier(0.455, 0.030, 0.515, 0.955));
}
.ease(@easing) when (@easing = ease-in-out-cubic) {
	.transition-timing-function(cubic-bezier(0.645, 0.045, 0.355, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-quart) {
	.transition-timing-function(cubic-bezier(0.770, 0.000, 0.175, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-quint) {
	.transition-timing-function(cubic-bezier(0.860, 0.000, 0.070, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-sine) {
	.transition-timing-function(cubic-bezier(0.445, 0.050, 0.550, 0.950));
}
.ease(@easing) when (@easing = ease-in-out-expo) {
	.transition-timing-function(cubic-bezier(1.000, 0.000, 0.000, 1.000));
}
.ease(@easing) when (@easing = ease-in-out-circ) {
	.transition-timing-function(cubic-bezier(0.785, 0.135, 0.150, 0.860));
}
.ease(@easing) when (@easing = ease-in-out-back) {
	.transition-timing-function(cubic-bezier(0.680,-0.550, 0.265, 1.550));
}


/* backgrounds */

.verticalGradient(@color:#cbcbcb, @strenght:5%) {
	/*
	Remember to put the ; after a list of comma separated params to group them:
	.method(1,2,3;); => .method(@params) {...}

	If the method expect a list of params you don't need it:
	.method(1,2,3); => .method(@param-1, @param-2, @param-3) {...}
	*/
	.linear-gradient(top, saturate(lighten(@color,@strenght),(-@strenght/2)) 0%, saturate(darken(@color,@strenght),(@strenght/2))100%;);
}
.glossGradient(@top: rgb(200,200,200), @middle: rgb(100,100,100), @bottom: rgb(150,150,150)) {
	.linear-gradient(bottom, @top 0%, @middle 50%, @bottom 100%;);
}
.backgroundImage(@backgroundImage, @path:'') when (@use-rootpath = false) {
	background-image: url('@{path}@{backgroundImage}');
}.backgroundImage(@backgroundImage, @path:@rootpath) when (@use-rootpath = true) {
	background-image: url('@{path}/@{backgroundImage}');
}

.backgroundResponsive(@hdFullBackground, @hdReadyBackground, @tabletLandscapeBackground, @tabletPortraitBackground, @smartphoneLandscapeBackground, @smartphonePortraitBackground) {
	/*
	.backgroundResponsive(
		"path/hd-full/background.png",
		"path/hd-ready/background.png",
		"path/tablet-landscape/background.png",
		"path/tablet-portrait/background.png",
		"path/smartphone-landscape/background.png",
		"path/smartphone-portrait/background.png"
	);
	*/
	.backgroundHdFull(@hdFullBackground);
	.backgroundHdReady(@hdReadyBackground);
	.backgroundTabletLandscape(@tabletLandscapeBackground);
	.backgroundTabletPortrait(@tabletPortraitBackground);
	.backgroundSmartphoneLandscape(@smartphoneLandscapeBackground);
	.backgroundSmartphonePortrait(@smartphonePortraitBackground);
}
.backgroundHdFull(@hdFullBackground) {
	@media @from-hd-full {
		// Full HD
		.backgroundImage(@hdFullBackground);
	}
}
.backgroundHdReady(@hdReadyBackground) {
	@media @from-hd-ready {
		// HD Ready
		.backgroundImage(@hdReadyBackground);
	}
}
.backgroundTabletLandscape(@tabletLandscapeBackground) {
	@media @from-tablet-landscape {
		// Tablet landscape
		.backgroundImage(@tabletLandscapeBackground);
	}
}
.backgroundTabletPortrait(@tabletPortraitBackground) {
	@media @from-tablet-portrait {
		// Tablet portrait
		.backgroundImage(@tabletPortraitBackground);
	}
}
.backgroundSmartphoneLandscape(@smartphoneLandscapeBackground) {
	@media @from-smartphone-landscape {
		// Smartphone landscape
		.backgroundImage(@smartphoneLandscapeBackground);
	}
}
.backgroundSmartphonePortrait(@smartphonePortraitBackground) {
	@media @from-smartphone-portrait {
		// Smartphone portrait
		.backgroundImage(@smartphonePortraitBackground);
	}
}
.sprite(@image, @width, @height:@width, @backgroudSize:auto) {
	.backgroundImage(@image);
	background-repeat:no-repeat;
	background-size:@backgroudSize;
	.size(@width, @height);
	.wrap;
}
.spritePosition(@horizontalPosition:0, @verticalPosition:0, @width:0px, @height:@width) {
	background-position: unit(-(@horizontalPosition*@width),px) unit(-(@verticalPosition*@height),px);
}
.spriteCoordinates(@positionX:0px, @positionY:0px) {
	background-position: -@positionX -@positionY;
}
.cropText(@overflow:ellipsis, @whiteSpace:nowrap) {
	overflow: hidden;
	white-space: @whiteSpace;
	.text-overflow(@overflow);
}

.disableOutline() {
	outline:0;
	outline:none;
}.disableOutline() when (@use-css-prefix = true) {
	&::-moz-focus-inner {
		border: 0;
	}
}
.defaultElement() {
	.appearance(none);
	outline:0;
	display: inline-block;
	border: none;
	background-color: transparent;
}

.roundTop(@radius:6px) {
	// sets the top radius of the element
	/*
	Default usage
	.round-top(4px);
	*/
	.border-radius(@radius @radius 0px 0px);
}
.roundBottom(@radius:6px) {
	// sets the bottom radius of the element
	/*
	Default usage
	.round-bottom(4px);
	*/
	.border-radius(0px 0px @radius @radius);
}
.roundLeft(@radius:6px) {
	// sets the left radius of the element
	/*
	Default usage
	.round-left(4px);
	*/
	.border-radius(@radius 0px 0px @radius);
}
.roundRight(@radius:6px) {
	// sets the right radius of the element
	/*
	Default usage
	.round-right(4px);
	*/
	.border-radius(0px @radius @radius 0px);
}


.asTable(@cellPadding:@global-padding, @verticalAlign:middle, @tableWidth:100%) {
	display: table;
	width: @tableWidth;
	> * {
		.asTableRow(@cellPadding, @verticalAlign);
	}
}

.asTableRow(@cellPadding:@global-padding, @verticalAlign:middle) {
	display: table-row;
	> * {
		.asTableCell(@cellPadding, @verticalAlign);
	}
}

.asTableCell(@cellPadding:@global-padding, @verticalAlign:middle) {
	display: table-cell;
	padding: @cellPadding;
	vertical-align: @verticalAlign;
}

.moveTop(@top:0px, @position:relative) {
	position: @position;
	top:@top;
}

.moveBottom(@bottom:0px, @position:relative) {
	position: @position;
	bottom:@bottom;
}

.moveLeft(@left:0px, @position:relative) {
	position: @position;
	left:@left;
}

.moveRight(@right:0px, @position:relative) {
	position: @position;
	right:@right;
}

.size(@width:16px, @height:@width) {
	width: @width;
	height: @height;
}

.arrowLeft(@size:1em, @color:#FFFFFF, @top:0px, @right:0px) {
	position: relative;
	font-size: 0;
	line-height: 0;
	width: 0px;
	border-top: @size solid transparent;
	border-right: @size solid @color;
	border-bottom: @size solid transparent;
	right: @right;
	top: @top;
}

.outlineBoxShadow(@outlineOpacity:0.2, @boxShadow:0px 0px 0px transparent) {
	.box-shadow(0px 0px 1px rgba(0,0,0,@outlineOpacity), @boxShadow;);
}

.hooked(@zIndex:100) {
	position:fixed;
	width:100%;
	left:0px;
	z-index:@zIndex;
	.wrap;
	
	.transition(top .3s ease-in-out);

	&.to-top {
		top:0px;
	}
	&.to-bottom {
		bottom:0px;
	}
}
