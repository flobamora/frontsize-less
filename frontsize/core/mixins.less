/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==             FRONTSIZE             ===================================================================================================================================
==             MIXINS                ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

// Easing effects
.ease-in-quad		{.ease(cubic-bezier(0.550, 0.085, 0.680, 0.530));}
.ease-in-cubic		{.ease(cubic-bezier(0.550, 0.055, 0.675, 0.190));}
.ease-in-quart		{.ease(cubic-bezier(0.895, 0.030, 0.685, 0.220));}
.ease-in-quint		{.ease(cubic-bezier(0.755, 0.050, 0.855, 0.060));}
.ease-in-sine		{.ease(cubic-bezier(0.470, 0.000, 0.745, 0.715));}
.ease-in-expo		{.ease(cubic-bezier(0.950, 0.050, 0.795, 0.035));}
.ease-in-circ		{.ease(cubic-bezier(0.600, 0.040, 0.980, 0.335));}
.ease-in-back		{.ease(cubic-bezier(0.600,-0.280, 0.735, 0.045));}
.ease-out-quad		{.ease(cubic-bezier(0.250, 0.460, 0.450, 0.940));}
.ease-out-cubic		{.ease(cubic-bezier(0.215, 0.610, 0.355, 1.000));}
.ease-out-quart		{.ease(cubic-bezier(0.165, 0.840, 0.440, 1.000));}
.ease-out-quint		{.ease(cubic-bezier(0.230, 1.000, 0.320, 1.000));}
.ease-out-sine		{.ease(cubic-bezier(0.390, 0.575, 0.565, 1.000));}
.ease-out-expo		{.ease(cubic-bezier(0.190, 1.000, 0.220, 1.000));}
.ease-out-circ		{.ease(cubic-bezier(0.075, 0.820, 0.165, 1.000));}
.ease-out-back		{.ease(cubic-bezier(0.175, 0.885, 0.320, 1.275));}
.ease-in-out-quad	{.ease(cubic-bezier(0.455, 0.030, 0.515, 0.955));}
.ease-in-out-cubic	{.ease(cubic-bezier(0.645, 0.045, 0.355, 1.000));}
.ease-in-out-quart	{.ease(cubic-bezier(0.770, 0.000, 0.175, 1.000));}
.ease-in-out-quint	{.ease(cubic-bezier(0.860, 0.000, 0.070, 1.000));}
.ease-in-out-sine	{.ease(cubic-bezier(0.445, 0.050, 0.550, 0.950));}
.ease-in-out-expo	{.ease(cubic-bezier(1.000, 0.000, 0.000, 1.000));}
.ease-in-out-circ	{.ease(cubic-bezier(0.785, 0.135, 0.150, 0.860));}
.ease-in-out-back	{.ease(cubic-bezier(0.680,-0.550, 0.265, 1.550));}

/* backgrounds */

.vertical-gradient(@color:#cbcbcb, @strenght:5%) {
	/*
	Remember to put the ; after a list of comma separated params to group them:
	.method(1,2,3;); => .method(@params) {...}

	If the method expect a list of params you don't need it:
	.method(1,2,3); => .method(@param-1, @param-2, @param-3) {...}
	*/
	.linear-gradient(top, saturate(lighten(@color,@strenght),(-@strenght/2)) 0%, saturate(darken(@color,@strenght),(@strenght/2))100%;);
}
.gloss-gradient(@top: rgb(200,200,200), @middle: rgb(100,100,100), @bottom: rgb(150,150,150)) {
	.linear-gradient(bottom, @top 0%, @middle 50%, @bottom 100%;);
}
.background-responsive(@hdFullBackground, @hdReadyBackground, @tabletLandscapeBackground, @tabletPortraitBackground, @smartphoneLandscapeBackground, @smartphonePortraitBackground) {
	/*
	.background-responsive(
		"path/hd-full/background.png",
		"path/hd-ready/background.png",
		"path/tablet-landscape/background.png",
		"path/tablet-portrait/background.png",
		"path/smartphone-landscape/background.png",
		"path/smartphone-portrait/background.png"
	);
	*/
	.background-hd-full(@hdFullBackground);
	.background-hd-ready(@hdReadyBackground);
	.background-tablet-landscape(@tabletLandscapeBackground);
	.background-tablet-portrait(@tabletPortraitBackground);
	.background-smartphone-landscape(@smartphoneLandscapeBackground);
	.background-smartphone-portrait(@smartphonePortraitBackground);
}
.background-hd-full(@hdFullBackground) {
	@media only screen and (min-width : @hd-full-step) {
		// Full HD
		background-image:url('@{hdFullBackground}');
	}
}
.background-hd-ready(@hdReadyBackground) {
	@media only screen and (min-width : @hd-ready-step) {
		// HD Ready
		background-image:url('@{hdReadyBackground}');
	}
}
.background-tablet-landscape(@tabletLandscapeBackground) {
	@media only screen and (min-width : @tablet-landscape-step) {
		// Tablet landscape
		background-image:url('@{tabletLandscapeBackground}');
	}
}
.background-tablet-portrait(@tabletPortraitBackground) {
	@media only screen and (min-width : @tablet-portrait-step) {
		// Tablet portrait
		background-image:url('@{tabletPortraitBackground}');
	}
}
.background-smartphone-landscape(@smartphoneLandscapeBackground) {
	@media only screen and (min-width : @smartphone-landscape-step) {
		// Smartphone landscape
		background-image:url('@{smartphoneLandscapeBackground}');
	}
}
.background-smartphone-portrait(@smartphonePortraitBackground) {
	@media only screen and (min-width : 1px) {
		// Smartphone portrait
		background-image:url('@{smartphonePortraitBackground}');
	}
}
.sprite(@image, @width, @height, @backgroudSize:100%) {
	background-image:url("@{image}");
	background-repeat:no-repeat;
	background-size:@backgroudSize;
	width:@width;
	height:@height;
	.wrap;
}

.sprite-position(@horizontalPosition:0, @verticalPosition:0, @width:0px, @height:0px) {
	background-position: unit(-(@horizontalPosition*@width),px) unit(-(@verticalPosition*@height),px);
}


.hide-text-overflow(@overflow:ellipsis) {
	text-overflow: @overflow;
	overflow: hidden;
}
