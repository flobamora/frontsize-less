/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==              BASE                 ===================================================================================================================================
==              MIXIN                ===================================================================================================================================
==             WIDGETS               ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

.code-base(@padding:0) {
	font-family: @font-monospace;
	padding:@padding;
	
	border:1px solid rgba(0,0,0,.03);
	background-color: rgba(0,0,0,.075);

	.border-radius(4px);
	.box-shadow(0px 1px 0px rgba(255,255,255,.6));
}

.mark-base(@backgroundColor:rgb(255,255,0)) {
	color:inherit;
	background-color:@backgroundColor;

	.box-shadow(0 0 1px rgba(0, 0, 0, 0.35), inset 0 0 2px rgba(255, 255, 255, 0.75););
}

.input-text-base() {
	border:1px solid rgba(0,0,0,.2);
	background-color: rgba(0,0,0,.05);

	color:@font-default-color;
	
	.box-shadow(inset 0px 1px 4px rgba(0,0,0,.15), 0px 0px 0px rgba(0,0,0,0););
	.transition(border-color .25s ease-in-out, background-color .25s ease-in-out, box-shadow .25s ease-in-out;);

	&:focus {
		border-color:rgba(0,0,0,.3);
		background-color: white;
		.box-shadow(inset 0px 0px 0px rgba(0,0,0,0), 0px 1px 4px rgba(0,0,0,0.15););
	}
}

.hr-base() {
	border:none;
	border-top:1px solid rgba(0,0,0,.075);
	border-bottom:1px solid rgba(255,255,255,.8);
	padding:0;
	margin:@vertical-padding 0;
}

.a-base(@color:@font-default-color) {
	line-height: 1.25;
	text-decoration: none;
	color:@color;
	border-bottom:2px solid fade(@color, 30%);

	@animation:0.3s ease-in-out;
	.transition(border-bottom @animation, color @animation;);
	
	&:hover,
	&.selected,
	&.active {
		color:saturate(darken(@color, 10%), 7%);
		border-bottom-color: @color;
	}
	&.selected {
		cursor: default;
	}
}
/*
.a-base(@color:@font-default-color) {

	
	border-bottom:2px solid transparent;
	.transition(color .25s ease-out, border-color .25s ease-in-out;);

	&:hover {
		border-bottom-color:fade(@color, 50%);
	}
}
*/

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==             SECTIONS              ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

/*
SMACSS - Base Rules
http://smacss.com/book/type-base
*/

body {
	outline-style:none;
	margin:0;
	padding:0;
	font-family: @font-default;
	color:@font-default-color;
}

article,
nav,
aside,
section,
header,
footer,
h1, h2, h3, h4, h5, h6
hgroup,
address {
	.wrap;
}

h1, h2, h3, h4, h5, h6 {
	margin:0;
	padding:0;
	font-family: @font-heading;
}

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==             GROUPING              ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

pre {
	.code-base(1em);
	code {
		border-color:transparent;
		background-color: transparent;
		.box-shadow(none);
	}
	&.with-small-fonts {
		font-family: @font-monospace;
	}
}

hr {
	.wrap;
	display: block;
	width:100%;
	.hr-base();
}

p,
blockquote,
ol,
ul,
li,
dl, dt, dd,
figure,
figcaption,
div {
	.wrap;
	margin:0;
	padding:0;
}

ul {
	@padding:(@horizontal-padding + (@horizontal-padding/4));
	padding-left:@padding;
	padding-right:@padding;
	padding-bottom:@padding;
}

nav {
	ul {
		list-style-type: none;
		padding:0;
	}
}

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==              TABLES               ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

table {
	/*
	The table element represents data with more than one dimension, in the form of a table.
	Tables must not be used as layout aids.

	Code snippet:
	<table>
		<tr>
			<td>dog</td>
			<td>cat</td>
			<td>horse</td>
			<td>iguana</td>
		</tr>
	</table>

	http://html5doctor.com/element-index/#table
	*/
}

caption {
	/*
	The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.

	When a table element is the only content in a figure element other than the figcaption, the caption element should be omitted in favor of the figcaption.

	Code snippet:
	<table>
		<thead>
			<tr>
				<th scope="col">Header 1</th>
				<th scope="col">Header 2</th>
				<th scope="col">Header 3</th>
			</tr>
		</thead>
		<tfoot>
			...
		</tfoot>
		<tbody>
			...
		</tbody>
	</table>

	http://html5doctor.com/element-index/#caption
	*/
}

thead {
	/*
	The thead element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table.

	Code snippet:
	<table>
		<thead>
			<tr>
				<th scope="col">Header 1</th>
				<th scope="col">Header 2</th>
				<th scope="col">Header 3</th>
			</tr>
		</thead>
		<tfoot>
			...
		</tfoot>
		<tbody>
			...
		</tbody>
	</table>

	http://html5doctor.com/element-index/#thead
	*/
}

tbody {
	/*
	The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.

	Code snippet:
	<table>
		<thead>
			...
		</thead>
		<tfoot>
			...
		</tfoot>
		<tbody>
			<tr>
				<td>Cell 1</td>
				<td>Cell 2</td>
				<td>Cell 3</td>
			</tr>
			<tr>
				<td>Cell 7</td>
				<td>Cell 8</td>
				<td>Cell 9</td>
			</tr>
		</tbody>
	</table>

	http://html5doctor.com/element-index/#tbody
	*/
}
tfoot {
	/*
	The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.

	Code snippet:
	<table>
		<thead>
			...
		</thead>
		<tfoot>
			<tr>
				<td>Footer 1</td>
				<td>Footer 2</td>
				<td>Footer 3</td>
			</tr>
		</tfoot>
		<tbody>
			...
		</tbody>
	</table>

	http://html5doctor.com/element-index/#tfoot
	*/
}

tr {
	/*
	The tr element represents a row of cells in a table.

	Code snippet:
	<table>
		<tr>
			<th>dog</th>
			<th>cat</th>
			<th>horse</th>
			<th>iguana</th>
		</tr>
		<tr>
			<td>5</td>
			<td>2</td>
			<td>10</td>
			<td>500</td>
		</tr>
	</table>

	http://html5doctor.com/element-index/#tr
	*/
}

th {
	/*
	The th element represents a header cell in a table.

	Code snippet:
	<table>
		<tr>
			<th>dog</th>
			<th>cat</th>
			<th>horse</th>
			<th>iguana</th>
		</tr>
		<tr>
			<td>5</td>
			<td>2</td>
			<td>10</td>
			<td>500</td>
		</tr>
	</table>

	http://html5doctor.com/element-index/#th
	*/
}

td {
	/*
	The td element represents a data cell in a table.

	Code snippet:
	<table>
		<tr>
			<td>dog</td>
			<td>cat</td>
			<td>horse</td>
			<td>iguana</td>
		</tr>
	</table>

	http://html5doctor.com/element-index/#td
	*/
}

col {
	/*
	If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup.
	
	Code snippet:
	<table>
		<colgroup>
			<col class="column1" />
		    <col class="column2" />
		    <col class="column3-4" span="2" />
		</colgroup>
		<tr>
			<th>dog</th>
			<th>cat</th>
			<th>horse</th>
			<th>iguana</th>
		</tr>
		<tr>
			<td>5</td>
			<td>2</td>
			<td>10</td>
			<td>500</td>
		</tr>
	</table>

	http://html5doctor.com/element-index/#col
	*/
}

colgroup {
	/*
	The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element.

	If the colgroup element contains no col elements, then the element may have a span content attribute specified, whose value must be a valid non-negative integer greater than zero.
	
	Code snippet:
	<table>
		<colgroup>
			<col class="column1" />
		    <col class="column2" />
		    <col class="column3-4" span="2" />
		</colgroup>
		<tr>
			<th>dog</th>
			<th>cat</th>
			<th>horse</th>
			<th>iguana</th>
		</tr>
		<tr>
			<td>5</td>
			<td>2</td>
			<td>10</td>
			<td>500</td>
		</tr>
	</table>

	http://html5doctor.com/element-index/#colgroup
	*/
}

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==               FORMS               ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

form {
	/*
	The form element represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.

	Code snippet:
	<form id="app-login" action="process.php">
		<fieldset>
			<legend>Login Details</legend>
			<div>
				<label for="user-name">Username:</label>
				<input name="user-name" type="email" placeholder="Your username is your email address" required autofocus>
			</div>
			<div>
				<label for="password">Password:</label>
				<input name="password" type="password" placeholder="6 digits, a combination of numbers and letters" required>
			</div>
			<div>
				<input name="login" type="submit" value="Login">
			</div>
		</fieldset>
	</form>

	http://html5doctor.com/element-index/#form
	*/
}

fieldset {
	/*
	The fieldset element is expected to establish a new block formatting context.

	If the fieldset element has a child that matches the conditions in the list below, then the first such child is the fieldset element's rendered legend:
	The child is a legend element.
	The child is not out-of-flow (e.g. not absolutely positioned or floated).
	The child is generating a box (e.g. it is not 'display:none').
	
	Code snippet:
	<form id="app-login" action="process.php">
		<fieldset>
			<legend>Login Details</legend>
			<div>
				<label for="user-name">Username:</label>
				<input name="user-name" type="email" placeholder="Your username is your email address" required autofocus>
			</div>
			<div>
				<label for="password">Password:</label>
				<input name="password" type="password" placeholder="6 digits, a combination of numbers and letters" required>
			</div>
			<div>
				<input name="login" type="submit" value="Login">
			</div>
		</fieldset>
	</form>
	
	http://html5doctor.com/element-index/#fieldset
	*/
}

legend {
	/*
	The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any.
	
	Code snippet:
	<form id="app-login" action="process.php">
		<fieldset>
			<legend>Login Details</legend>
			<div>
				<label for="user-name">Username:</label>
				<input name="user-name" type="email" placeholder="Your username is your email address" required autofocus>
			</div>
			<div>
				<label for="password">Password:</label>
				<input name="password" type="password" placeholder="6 digits, a combination of numbers and letters" required>
			</div>
			<div>
				<input name="login" type="submit" value="Login">
			</div>
		</fieldset>
	</form>

	http://html5doctor.com/element-index/#legend
	*/
}

label {
	/*
	The label represents a caption in a user interface.
	The caption can be associated with a specific form control, known as the label element's labeled control, either using for attribute, or by putting the form control inside the label element itself.

	Code snippet:
	<label for="un">Username:</label>
	<input name="user-name" id="un" type="email" placeholder="Your username is your email address" required autofocus>

	http://html5doctor.com/element-index/#label
	*/
	display: inline-block;
	.wrap;
	margin-top:@vertical-padding;

	textarea,
	input {
		margin-top:0;
	}
}

input {
	/*
	The input element represents a typed data field, usually with a form control to allow the user to edit the data.

	Code snippet:
	<input name="user-name" type="email" placeholder="Your username is your email address" required autofocus>
	<input name="password" type="password" placeholder="6 digits, a combination of numbers and letters" required>

	http://html5doctor.com/element-index/#input
	*/
}

input[type="text"],
input[type="reset"],
input[type="button"],
input[type="submit"],
input[type="password"] {
	.wrap;
}

textarea,
input[type="text"],
input[type="email"],
input[type="password"] {
	.fill;
	outline-style:none;
	margin-top:@vertical-padding;
	padding:(@vertical-padding/2) (@horizontal-padding/2);
	.input-placeholder(grey, lighten(grey, 20%));
	.input-text-base();
}

input[type="reset"],
input[type="button"],
input[type="submit"] {
	margin-top:@vertical-padding;
	//.button-metal();
	.button-dark-metal();
}

button {
	/*
	The button element represents a button. 
	If the element is not disabled, then the user agent should allow the user to activate the button.

	Code snippet:
	<button>Do something!</button>

	http://html5doctor.com/element-index/#button
	*/
	.wrap;
}

select {
	/*
	The select element represents a control for selecting amongst a set of options.
	
	Code snippet:
	<select id="title" name="title">
		<option value="" selected>Please choose</option>
		<option value="Mr">Mr</option>
		<option value="Miss">Miss</option>
		<option value="Mrs">Mrs</option>
		<option value="Ms">Ms</option>
		<option value="Dr">Dr</option>
		<option value="Other">Other</option>
	</select>

	http://html5doctor.com/element-index/#select
	*/
}

datalist {
	/*
	The datalist element represents a set of option elements that represent predefined options for other controls.
	The contents of the element represents fallback content for legacy user agents, intermixed with option elements that represent the predefined options.
	In the rendering, the datalist element represents nothing and it, along with its children, should be hidden.

	The datalist element is hooked up to an input element using the list attribute on the input element.

	Code snippet:
	<label>Your favourite fruit:
		<input type="text" name="fruit" list="fruits">
		<datalist id="fruits">
			<option value="Blackberry">Blackberry</option>
			<option value="Blackcurrant">Blackcurrant</option>
			<option value="Blueberry">Blueberry</option>
		</datalist>
	</label>

	http://html5doctor.com/element-index/#datalist
	*/
}

optgroup {
	/*
	The optgroup element represents a group of option elements with a common label.
	The element's group of option elements consists of the option elements that are children of the optgroup element.

	When showing option elements in select elements, user agents should show the option elements of such groups as being related to each other and separate from other option elements.

	Code snippet:
	<label for="country">Country</label>
	<select name="country" id="country">
		<optgroup label="Europe">
  			<option value="UK">UK</option>
			<option value="Germany">Germany</option>
			<option value="France">France</option>
		</optgroup>
		<optgroup label="North America">
			<option value="">USA</option>
			<option value="">Canada</option>
		</optgroup>
	</select>
	
	http://html5doctor.com/element-index/#optgroup
	*/
}

option {
	/*
	The option element represents an option in a select element or as part of a list of suggestions in a datalist element.

	In certain circumstances described in the definition of the select element, an option element can be a select element's placeholder label option.
	A placeholder label option does not represent an actual option, but instead represents a label for the select control.

	Code snippet:
	<label for="country">Country</label>
	<select name="country" id="country">
  		<option value="UK">UK</option>
		<option value="Germany">Germany</option>
		<option value="France">France</option>
		<option value="">USA</option>
		<option value="">Canada</option>
	</select>
	
	http://html5doctor.com/element-index/#option
	*/
}

textarea {
	/*
	The textarea element represents a multiline plain text edit control for the element's raw value.
	The contents of the control represent the control's default value.

	Code snippet:
	<form action="/action-name.php" method="post" enctype="multipart/form-data">
		<textarea cols="50" rows="10"></textarea> 
	</form>
	
	http://html5doctor.com/element-index/#textarea
	*/
	.fill;
	.wrap;
	.resize(vertical);
	@minHeight:100px;
	min-height:@minHeight;
	max-height:(@minHeight*3);
}

keygen {
	/*
	The keygen element represents a key pair generator control.
	When the control's form is submitted, the private key is stored in the local keystore, and the public key is packaged and sent to the server.

	Code snippet:
	<form action="/submit_key.php" method="post" enctype="multipart/form-data">
		<keygen name="key">
		<input type="submit" value="Submit">
	</form>
	
	http://html5doctor.com/element-index/#keygen
	*/
}

output {
	/*
	Represents the result of a calculation.

	The optional for attribute allows an explicit relationship to be made between the result of a calculation and the elements representing the values that influenced the calculation.
	If specified, the for attribute must contain a string consisting of an unordered set of unique, space-separated tokens, each of which must be the ID of an element in the same document.
	
	Code snippet:
	<form>
		<label for="flying">Flying Skill Level</label>
		<input name="flying-level" id="flying" type="range" min="0" max="250">
		<output for="flying" onforminput="value = flying.valueAsNumber">0</output>
	</form>
	
	http://html5doctor.com/element-index/#output
	*/
}

progress {
	/*
	Represents the completion progress of a task.
	Progress may be either indeterminate — meaning it is unclear how much work remains before the task is complete (e.g., the task is waiting for a response from a remote host) — or a numeric value between 0 and a given maximum, explicitly specifying the fraction of work that has so far been completed.

	Code snippet:
	<section>
		<p>Progress: <progress> <span id="p">0</span>% </progress> </p>

		<script>
		var progressBar = document.getElementById('p');
		function updateProgress(newValue) {
			progressBar.textContent = newValue;
		}
		</script>
	</section>

	http://html5doctor.com/element-index/#progress
	*/
}

meter {
	/*
	When the meter binding applies to a meter element, the element is expected to render as an 'inline-block' box with a 'height' of '1em' and a 'width' of '5em', a 'vertical-align' of '-0.2em', and with its contents depicting a gauge.

	When the element is wider than it is tall(or square), the depiction is expected to be of a horizontal gauge, with the minimum value on the right if the 'direction' property on this element has a computed value of 'rtl', and on the left otherwise.
	When the element is taller than it is wide, it is expected to depict a vertical gauge, with the minimum value on the bottom.

	Code snippet:
	Your score is: <meter> 2 out of 10 </meter>

	http://html5doctor.com/element-index/#meter
	*/
}

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==            INTERACTION            ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

details {
	/*
	The details element represents a disclosure widget from which the user can obtain additional information or controls.
	However, the details element is not appropriate for footnotes.

	Code snippet:
	<details>
        <summary>Name & Extension:</summary>

        <p><input type="text" name="fn" value="Pillar Magazine.pdf">
        <p><label><input type="checkbox" name="ext" checked> Hide extension</label>
	</details>

	http://html5doctor.com/element-index/#details
	*/
}

summary {
	/*
	The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.
	
	Code snippet:
	<details>
        <summary>More information </summary>
        <p>Here is the source data that is discussed in the article ...</p>
	</details>

	http://html5doctor.com/element-index/#summary
	*/
}

command {
	/*
	The command element represents a command that the user can invoke.
	A command can be part of a context menu or toolbar, using the menu element, or can be put anywhere else in the page, to define a keyboard shortcut.

	http://html5doctor.com/element-index/#command
	*/
}

menu {
	/*
	The menu element represents a list of commands.

	If a menu element's type attribute is in the context menu state, then the element represents the commands of a context menu, and the user can only interact with the commands if that context menu is activated.
	If a menu element's type attribute is in the toolbar state, then the element represents a list of active commands that the user can immediately interact with.

	If a menu element's type attribute is in the list state, then the element either represents an unordered list of items (each represented by an li element), each of which represents a command that the user can perform or activate, or, if the element has no li element children, flow content describing available commands.
	
	http://html5doctor.com/element-index/#menu
	*/
}

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==              EMBEDS               ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

img {
	/*
	An img element represents an image.
	The image given by the src attribute is the embedded content, and the value of the alt attribute is the img element's fallback content.

	The src attribute must be present, and must contain a valid non-empty URL potentially surrounded by spaces referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted.

	The img element must not be used as a layout tool.
	In particular, img elements should not be used to display transparent images, as they rarely convey meaning and rarely add anything useful to the document.

	http://html5doctor.com/element-index/#img
	*/

	-ms-interpolation-mode: bicubic;
}

iframe {
	/*
	The iframe element represents a nested browsing context.

	For iframe elements in HTML documents, the attribute, if present, must have a value using the HTML syntax that consists of the following syntactic components, in the given order:
	Any number of comments and space characters.
	Optionally, a DOCTYPE.
	Any number of comments and space characters.
	The root element, in the form of an html element.
	Any number of comments and space characters.

	http://html5doctor.com/element-index/#iframe
	*/
}

embed {
	/*
	Represents an integration point for an external(typically non-HTML) application or interactive content.

	The optional src attribute specifies the URL of the resource being embedded.

	The optional type attribute specifies the MIME type of the plugin to instantiate.
	The value must be a valid MIME type, optionally with parameters.
	If both the type attribute and the src attribute are present, then the type attribute must specify the same MIME type as the explicit Content-Type metadata of the resource given by the src attribute.
	
	http://html5doctor.com/element-index/#embed
	*/
}

object {
	/*
	The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image, as a nested browsing context, or as an external resource to be processed by a plugin.
	
	http://html5doctor.com/element-index/#object
	*/
}

param {
	/*
	The param element defines parameters for plugins invoked by object elements.
	It does not represent anything on its own.

	http://html5doctor.com/element-index/#param
	*/
}

video {
	/*
	Represents a video or movie.

	Content may be nested inside the video element.
	User agents should not show this content to the user.
	Authors should use this content to force older browsers to use a legacy video plugin or to inform the user of how to access the video content.

	http://html5doctor.com/element-index/#video
	*/
}

audio {
	/*
	Represents a sound or audio stream.

	Content may be nested inside the audio element.
	User agents should not show this content to the user.
	Authors should use this content to force older browsers to use a legacy audio plugin or to inform the user of how to access the audio content.

	Supported audio codecs:
	Chrome 3+ supports .ogg and .wav
	Firefox 3.5+ supports .ogg and .wav
	Opera 10.5+ supports .ogg and .wav
	Safari 4+ supports .mp3 and .wav

	http://html5doctor.com/element-index/#audio
	*/
}

source {
	/*
	The source element allows authors to specify multiple alternative media resources for media elements.
	It does not represent anything on its own.
	The src attribute gives the address of the media resource.
	The value must be a valid non-empty URL potentially surrounded by spaces.
	This attribute must be present.

	http://html5doctor.com/element-index/#source
	*/

}

canvas {
	/*
	Represents a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, or other visual images on the fly.
	
	Authors should not use the canvas element in a document when a more suitable element is available.
	For example, it is inappropriate to use a canvas element to render a page heading.
	If the desired presentation of the heading is graphically intense, it should be marked up using appropriate elements (typically h1) and then styled using CSS and supporting technologies such as XBL.

	When authors use the canvas element, they must also provide content that, when presented to the user, conveys essentially the same function or purpose as the bitmap canvas.
	This content should be nested within the canvas element as a fallback.

	http://html5doctor.com/element-index/#canvas
	*/
}

track {
	/*
	The track element allows authors to specify explicit external timed text tracks for media elements.
	It does not represent anything on its own.
	
	http://html5doctor.com/element-index/#track
	*/
}

map {
	/*
	The map element, in conjunction with any area element descendants, defines an image map.
	The element represents its children.
	
	http://html5doctor.com/element-index/#map
	*/
}

area {
	/*
	The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.

	If the area element has no href attribute, then the area represented by the element cannot be selected, and the alt attribute must be omitted.
	
	http://html5doctor.com/element-index/#area
	*/
}

/*
========================================================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
==               TEXTS               ===================================================================================================================================
==                                   ===================================================================================================================================
==                                   ===================================================================================================================================
========================================================================================================================================================================
*/

a {
	/*
	If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor).
	If the a element has no href attribute, then the element represents a placeholder for where a link might otherwise have been placed, if it had been relevant.

	The target, rel, media, hreflang, and type attributes must be omitted if the href attribute is not present.
	
	http://html5doctor.com/element-index/#a
	*/

	display: inline-block;
	color:@font-default-color;

	.a-base();

	&:hover {
		color:darken(@font-default-color, 15%);
	}
}
a img { border:none; }

br {
	/*
	The br element represents a line break.
	br elements must be used only for line breaks that are actually part of the content, as in poems or addresses.
	br elements must not be used for separating thematic groups in a paragraph.
	
	http://html5doctor.com/element-index/#br
	*/
}

wbr {
	/*
	The wbr element represents a line break opportunity.
	Any content inside wbr elements must not be considered part of the surrounding text.
	
	http://html5doctor.com/element-index/#wbr
	*/
}

em {
	/*
	Represents stress emphasis of its contents. The level of emphasis that a particular piece of content has is given by its number of ancestor em elements.
	The 'stress' being referred to is linguistic.
	If spoken, this stress would be emphasised pronunciation on a word that can change the nuance of a sentence.
	
	http://html5doctor.com/element-index/#em
	*/
}

strong {
	/*
	Represents strong importance for its contents.
	Indicate relative importance by nesting strong elements; each strong element increases the importance of its contents.
	Changing the importance of a piece of text with the strong element does not change the meaning of the sentence.
	
	http://html5doctor.com/element-index/#strong
	*/
}

i {
	/*
	Represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, a thought, a ship name, or some other prose whose typical typographic presentation is italicized.
	
	Only use i when nothing more suitable is available — e.g., em for text with stress emphasis, strong for text with semantic importance, cite for titles in a citation or bibliography, dfn for defining a word, and var for mathematical variables.
	
	http://html5doctor.com/element-index/#b
	*/
}

b {
	/*
	Represents a span of text to be stylistically offset from the normal prose without conveying any extra importance.
	Examples are key words in a document abstract, product names in a review, or other spans of text whose typical typographic presentation is bold.
	
	The b element should be used as a last resort when no other element is more appropriate.
	In particular, headings should use the h1 to h6 elements, stress emphasis should use the em element, importance should be denoted with the strong element, and text marked or highlighted should use the mark element.
	
	http://html5doctor.com/element-index/#b
	*/
}

u {
	/*
	The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation (when you are annotating something, but not explicitly saying what it is).
	Examples include indicating misspelt words, labeling proper names in traditional Chinese prose, or indicating a family name when the name’s order is non-western.
	
	http://html5doctor.com/element-index/#u
	*/
}

s {
	/*
	The s element represents contents that are no longer accurate or no longer relevant.
	
	http://html5doctor.com/element-index/#s
	*/
}

small {
	/*
	Represents side comments such as small print.
	It is not intended to be presentational.
	The small element should not be used for extended spans of text such as multiple paragraphs, lists, or sections of text. It is only intended for short runs of text.
	
	http://html5doctor.com/element-index/#small
	*/
}

abbr {
	/*
	Represents an abbreviation or acronym.
	The optional title attribute may be used to provide an expansion of the abbreviation.
	If specified, the title attribute must contain an expansion of the abbreviation and nothing else.
	
	http://html5doctor.com/element-index/#abbr
	*/
	cursor: help;
}

q {
	/*
	The q element represents some phrasing content quoted from another source.
	
	http://html5doctor.com/element-index/#q
	*/
}

cite {
	/*
	The cite element represents the title of a work (e.g. a book, a paper, an essay, a poem, a score, a song, a script, a film, a TV show, a game, a sculpture, a painting, a theatre production, a play, an opera, a musical, an exhibition, a legal case report, etc).
	This can be a work that is being quoted or referenced in detail (i.e. a citation), or it can just be a work that is mentioned in passing.

	A person's name is not the title of a work — even if people call that person a piece of work — and the element must therefore not be used to mark up people's names.
	(In some cases, the b element might be appropriate for names; e.g. in a gossip article where the names of famous people are keywords rendered with a different style to draw attention to them. In other cases, if an element is really needed, the span element can be used.)
	
	http://html5doctor.com/element-index/#cite
	*/
}

dfn {
	/*
	The dfn element represents the defining instance of a term.
	The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element.
	
	http://html5doctor.com/element-index/#dfn
	*/
}

sub {
	/*
	The sub element can be used inside a var element, for variables that have subscripts.
	
	http://html5doctor.com/element-index/#sub
	*/
}

sup {
	/*
	The sup element represents a superscript and the sub element represents a subscript.
	
	http://html5doctor.com/element-index/#sup
	*/
}

del {
	/*
	The del element represents a removal from the document.
	Thedel elements should not cross implied paragraph boundaries.
	
	http://html5doctor.com/element-index/#del
	*/
}

ins {
	/*
	The ins element represents an addition to the document.
	The ins elements should not cross implied paragraph boundaries.
	
	http://html5doctor.com/element-index/#ins
	*/
}

time {
	/*
	Represents a precise date and/or time in the proleptic Gregorian calendar.
	The time element encodes modern dates and times in a machine-readable way, so that, for example, user agents could offer to add an event to the user's calendar.
	
	http://html5doctor.com/element-index/#time
	*/

}

code {
	/*
	The code element represents a fragment of computer code.
	This could be an XML element name, a filename, a computer program, or any other string that a computer would recognize.
	
	http://html5doctor.com/element-index/#code
	*/
	.code-base();
}

kbd {
	/*
	The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).
	When the kbd element is nested inside a samp element, it represents the input as it was echoed by the system.
	When the kbd element contains a samp element, it represents input based on system output, for example invoking a menu item.
	When the kbd element is nested inside another kbd element, it represents an actual key or other single unit of input as appropriate for the input mechanism.
	
	http://html5doctor.com/element-index/#kbd
	*/
}

samp {
	/*
	The samp element represents (sample) output from a program or computing system.
	
	http://html5doctor.com/element-index/#samp
	*/
}

var {
	/*
	The var element represents a variable.
	This could be an actual variable in a mathematical expression or programming context, or it could just be a term used as a placeholder in prose.
	
	http://html5doctor.com/element-index/#var
	*/
	.code-base();
}

mark {
	/*
	Represents a run of text in one document marked or highlighted because of its relevance in another context.
	When used in a quotation or other block of text referenced in a document, it indicates a highlight that was not present in the original document — e.g., a portion of text in an academic publication that has recently come under additional scrutiny.

	http://html5doctor.com/element-index/#mark
	*/
	.mark-base();
}

bdi {
	/*
	The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting.
	
	http://html5doctor.com/element-index/#bdi
	*/
}

bdo {
	/*
	The bdo element represents explicit text directionality formatting control for its children.
	It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override.
	
	http://html5doctor.com/element-index/#bdo
	*/
}

span {
	/*
	The span element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.
	
	http://html5doctor.com/element-index/#span
	*/
}

ruby, rt, rp {
	/*
	Represents a container for base text and ruby text — small annotations used for phonetic readings in languages such as Japanese and Chinese.
	Examples include furigana and zhùyin fúhào (bopomofo).
	
	http://html5doctor.com/element-index/#ruby
	*/
}